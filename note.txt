修改底下html，增加一個filter選單和按鈕，這個filter選單是根據使用者上傳以後，讀取道的年月日，例如讀到時間2024-11-24 08:04:12，可以filter出所有2024-11-24這天的數據，就根據讀到多少天，filter選單就列多少，還有一個選單是all，按下filter按鈕以後，就可以重新畫圖和輸出table，根據filter選擇的那一天，列出完整修改後html

<!-- 
  Copyright © [2023] [Dustin_Chen]. All rights reserved.
  Author: Dustin_Chen
  Email:  Dustin_Chen@compal.com or chuhpsdustin@gmail.com
-->

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>mifi_watch_RSRP_SINR_upload</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
  <style>
        body {
            line-height: 1.2;
            font-size: 14px;
            font-family: Roboto, sans-serif;
            margin: 20px;			
        }	
    button {
      line-height: 1;	
      padding: 4px;
      font-size: 14px;
      display: inline-block;
    }
    .container {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      gap: 20px;
      margin-top: 20px;
    }
    .canvas-container {
      flex: 1;
    }
    table {
      width: auto;
      border-collapse: collapse;
      margin-top: 20px;
      table-layout: auto;
    }
    th, td {
      padding: 5px 10px;
      text-align: left;
      border: 1px solid #ccc;
    }
    th {
      background-color: #f2f2f2;
    }
    canvas {
      max-width: 100%;
      margin-top: 20px;
    }
	
    .red {
      color: red;  /* 設定文字顏色為紅色 */
    }	
  </style>
</head>
<body>

<h2>mifi_watch_RSRP_SINR_upload</h2>

  <p style="margin: 0;">Author: Dustin_Chen, email: <a href="mailto:Dustin_Chen@compal.com"
      style="line-height: 1;">Dustin_Chen@compal.com</a> or <a href="mailto:chuhpsdustin@gmail.com"
      style="line-height: 1;">chuhpsdustin@gmail.com</a></p>

  <ul>
    <li><strong>【How to use】</strong>
      <ul>
        <li>step0. MobaXterm => Session -> Shell -> Terminal settings -> Select "Log terminal output to": _DesktopDir_</li>
        <li>step1. 【<span class="red">adb shell</span>】 into mifi </li>
		<li>step2. Set the UE time correctly. ex: <span class="red">date -s "2024-08-20 09:03:50"</span> </li>			
      <li>step3. "Mifi" use this command to run every 5 seconds 【<span class="red">watch -n 5 'echo "$(date "+%Y-%m-%d %H:%M:%S")"; atcli at+bnrinfo'</span>】</li>
      <li>step4. Upload the output file to parse</li>


<!-- Unified button -->
			<div>
  <input type="file" id="fileInput" accept=".txt,.log" style="display: none;" />
  <button onclick="triggerFileInput()">Upload</button>
  <button onclick="exportToExcel()">Export to Excel</button>
</div>

<div class="container">
  <div class="canvas-container">
    <canvas id="rsrpChart"></canvas>
  </div>
  <div class="canvas-container">
    <canvas id="sinrChart"></canvas>
  </div>
</div>

<table id="outputTable">
  <thead>
    <tr>
      <th>Time</th>
      <th>RSRP</th>
      <th>SINR</th>
      <th>RX0</th>
      <th>RX1</th>
      <th>RX2</th>
      <th>RX3</th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table>

    </ul>
  </li>
</ul>

<script>
  let rsrpChart = null;
  let sinrChart = null;

  // Function to trigger the file input dialog
  function triggerFileInput() {
    const fileInput = document.getElementById('fileInput');
    fileInput.click(); // This will open the file dialog
    fileInput.onchange = function () {
    const file = fileInput.files[0];
    
    if (!file) {
      alert("Please upload a file first.");
      return;
    }

    const reader = new FileReader();

    reader.onload = function(event) {
      const content = event.target.result;
      parseData(content);
    };

    reader.onerror = function(event) {
      alert("Error reading file");
    };

    reader.readAsText(file);
    };
  }

  // Function to parse the file data
  function parseData(inputText) {
    const lines = inputText.split('\n').filter(line => line.trim() !== '');
    let time1 = '';
    let rsrpAndSinr = '';
    let rxData = { rx0: '', rx1: '', rx2: '', rx3: '' };
    
    const times = [];
    const rsrps = [];
    const sinrs = [];
    const rx0s = [];
    const rx1s = [];
    const rx2s = [];
    const rx3s = [];

    // Clear table and chart data
    const tbody = document.querySelector('#outputTable tbody');
    tbody.innerHTML = '';
    if (rsrpChart) rsrpChart.destroy();
    if (sinrChart) sinrChart.destroy();

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();

      // Parse time format (e.g., 2024-11-24 08:04:12)
      const timeMatch = line.match(/(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})/);
      if (timeMatch) {
        time1 = timeMatch[1];
      }

      // Parse RSRP and SINR (e.g., RSRQ -11 dB, RSRP -78 dBm, SINR 32 dB)
      const rsrpSinrMatch = line.match(/RSRQ\s*(-?\d+)\s*dB,\s*RSRP\s*(-?\d+)\s*dBm,\s*SINR\s*(-?\d+)\s*dB/);
      if (rsrpSinrMatch) {
        rsrpAndSinr = `RSRP ${rsrpSinrMatch[2]} dBm, SINR ${rsrpSinrMatch[3]} dB`;
      }

      // Parse RX0 to RX3 data
      const rxMatch = line.match(/(RX[0-3])\s*power:\s*(-?\d+)\s*dBm,.*rsrp:\s*(-?\d+)\s*dBm/);
      if (rxMatch) {
        const rxIndex = rxMatch[1].toLowerCase();
        const rsrpValue = rxMatch[3];
        if (rxIndex === 'rx0') {
          rxData.rx0 = `RX0 rsrp: ${rsrpValue} dBm`;
        } else if (rxIndex === 'rx1') {
          rxData.rx1 = `RX1 rsrp: ${rsrpValue} dBm`;
        } else if (rxIndex === 'rx2') {
          rxData.rx2 = `RX2 rsrp: ${rsrpValue} dBm`;
        } else if (rxIndex === 'rx3') {
          rxData.rx3 = `RX3 rsrp: ${rsrpValue} dBm`;
        }
      }

      // After processing each line, assemble and display data
      if (time1 && rsrpAndSinr && rxData.rx0 && rxData.rx1 && rxData.rx2 && rxData.rx3) {
        const newRow = document.createElement('tr');
        newRow.innerHTML = `
          <td>${time1}</td>
          <td>${rsrpAndSinr.split(', ')[0]}</td>
          <td>${rsrpAndSinr.split(', ')[1]}</td>
          <td>${rxData.rx0}</td>
          <td>${rxData.rx1}</td>
          <td>${rxData.rx2}</td>
          <td>${rxData.rx3}</td>
        `;
        tbody.appendChild(newRow);

        times.push(time1);
        rsrps.push(parseInt(rsrpAndSinr.split(', ')[0].split(' ')[1]));
        sinrs.push(parseInt(rsrpAndSinr.split(', ')[1].split(' ')[1]));
        rx0s.push(parseInt(rxData.rx0.split(' ')[2]));
        rx1s.push(parseInt(rxData.rx1.split(' ')[2]));
        rx2s.push(parseInt(rxData.rx2.split(' ')[2]));
        rx3s.push(parseInt(rxData.rx3.split(' ')[2]));

        time1 = rsrpAndSinr = '';
        rxData = { rx0: '', rx1: '', rx2: '', rx3: '' };
      }
    }

    // Draw charts if data is available
    if (times.length > 0) {
      const rsrpCtx = document.getElementById('rsrpChart').getContext('2d');
      rsrpChart = new Chart(rsrpCtx, {
        type: 'line',
        data: {
          labels: times,
          datasets: [
            { label: 'RSRP', data: rsrps, borderColor: 'rgb(255, 99, 132)', fill: false },
            { label: 'RX0', data: rx0s, borderColor: 'rgb(75, 192, 192)', fill: false },
            { label: 'RX1', data: rx1s, borderColor: 'rgb(153, 102, 255)', fill: false },
            { label: 'RX2', data: rx2s, borderColor: 'rgb(255, 159, 64)', fill: false },
            { label: 'RX3', data: rx3s, borderColor: 'rgb(54, 162, 235)', fill: false }
          ]
        },
        options: {
          responsive: true,
          scales: {
            x: { type: 'category', title: { display: true, text: 'Time' } },
            y: { beginAtZero: false, title: { display: true, text: 'RSRP / RX Power' } }
          }
        }
      });

      const sinrCtx = document.getElementById('sinrChart').getContext('2d');
      sinrChart = new Chart(sinrCtx, {
        type: 'line',
        data: {
          labels: times,
          datasets: [{ label: 'SINR', data: sinrs, borderColor: 'rgb(54, 162, 235)', fill: false }]
        },
        options: {
          responsive: true,
          scales: {
            x: { type: 'category', title: { display: true, text: 'Time' } },
            y: { beginAtZero: false, title: { display: true, text: 'SINR' } }
          }
        }
      });
    }
  }

  // Function to export data to Excel
  function exportToExcel() {
    const table = document.getElementById("outputTable");
    const wb = XLSX.utils.table_to_book(table, { sheet: "Sheet 1" });
    XLSX.writeFile(wb, "data.xlsx");
  }
</script>

</body>
</html>
